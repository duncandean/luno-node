/**
 * Luno API
 * The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from '../api';

/**
* The <code>base</code> and <code>counter</code> amounts are the principal amounts that were traded, ignoring fees. For example, if the order resulted in a single trade of 1 BTC for 1000 ZAR, then <code>base</code>=1 BTC and <code>counter</code>=1000 ZAR.  The <code>fee_base</code> and <code>fee_counter</code> amounts are the fees debited after the trade principal amounts.  For example, for a buy order, <code>base - base_fee</code> would be credited to the BTC account and <code>counter + counter_fee</code> would be debited from the ZAR account. Similarly, for a sell order, <code>counter - counter_fee</code> would be credited to the ZAR account and <code>base + base_fee</code> would be debited from the BTC account.
*/
export class Order {
    'base'?: string;
    'completedTimestamp'?: string;
    'counter'?: string;
    'creationTimestamp'?: string;
    'expirationTimestamp'?: string;
    'feeBase'?: string;
    'feeCounter'?: string;
    'limitPrice'?: string;
    'limitVolume'?: string;
    'orderId'?: string;
    /**
    * Specifies the market.
    */
    'pair'?: string;
    /**
    * <code>PENDING</code> The order has been placed. Some trades may have taken place but the order is not filled yet.<br> <code>COMPLETE</code> The order is no longer active. It has been settled or has been cancelled.
    */
    'state'?: Order.StateEnum;
    /**
    * <code>BID</code> bid (buy) limit order.<br> <code>ASK</code> ask (sell) limit order.
    */
    'type'?: Order.TypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "base",
            "baseName": "base",
            "type": "string"
        },
        {
            "name": "completedTimestamp",
            "baseName": "completed_timestamp",
            "type": "string"
        },
        {
            "name": "counter",
            "baseName": "counter",
            "type": "string"
        },
        {
            "name": "creationTimestamp",
            "baseName": "creation_timestamp",
            "type": "string"
        },
        {
            "name": "expirationTimestamp",
            "baseName": "expiration_timestamp",
            "type": "string"
        },
        {
            "name": "feeBase",
            "baseName": "fee_base",
            "type": "string"
        },
        {
            "name": "feeCounter",
            "baseName": "fee_counter",
            "type": "string"
        },
        {
            "name": "limitPrice",
            "baseName": "limit_price",
            "type": "string"
        },
        {
            "name": "limitVolume",
            "baseName": "limit_volume",
            "type": "string"
        },
        {
            "name": "orderId",
            "baseName": "order_id",
            "type": "string"
        },
        {
            "name": "pair",
            "baseName": "pair",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "Order.StateEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "Order.TypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return Order.attributeTypeMap;
    }
}

export namespace Order {
    export enum StateEnum {
        PENDING = <any> 'PENDING',
        COMPLETE = <any> 'COMPLETE'
    }
    export enum TypeEnum {
        BID = <any> 'BID',
        ASK = <any> 'ASK'
    }
}
